{"name":"Symbiosis","tagline":"Event system for drop in support of plugin architecture.","body":"Symbiosis is a drop-in event driven plugin architecture.\r\n\r\nThe goal is to allow anyone to create a plugin structure for their existing code base using an event oriented system.\r\nThe secondary benefit of using Symbiosis is that the event structure can be used apart from the plugin structure.\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/zumba/symbiosis/v/stable.png)](https://packagist.org/packages/zumba/symbiosis)\r\n[![Build Status](https://secure.travis-ci.org/zumba/symbiosis.png)](http://travis-ci.org/zumba/symbiosis)\r\n\r\n## Requirements\r\n\r\nPHP 5.3+\r\n\r\n## Setup\r\n\r\n1. Add as a composer dependency or install directly from composer.\r\n1. That's it!\r\n\r\n## Testing\r\n\r\n1. Run `composer install --dev`.\r\n2. Run `phpunit`.\r\n\r\n## Example Plugin\r\n\r\n### Plugin\r\n\r\n```php\r\n<?php\r\n\r\nnamespace \\YourApp\\Plugin;\r\n\r\nuse \\Zumba\\Symbiosis\\Framework\\Plugin,\r\n    \\Zumba\\Symbiosis\\Event\\EventManager;\r\n\r\nclass SamplePlugin extends Plugin {\r\n\r\n  public function registerEvents() {\r\n    EventManager::register('sample.someevent', function($event) {\r\n      print_r($event->data());\r\n    });\r\n  }\r\n\r\n}\r\n```\r\n\r\n### Your application bootstrap\r\n\r\n```php\r\n<?php\r\n\r\nuse \\Zumba\\Symbiosis\\Plugin\\PluginManager;\r\n\r\n// Somewhere in your application bootstrap, load your plugins\r\nPluginManager::loadPlugins(\r\n\t'/path/to/your/plugin/directory', // Path to where you stored your plugins\r\n\t'YourApp\\Plugin'                  // namespace defined in your plugins (see example above)\r\n);\r\n```\r\n\r\n### Your application\r\n\r\n```php\r\n<?php\r\n\r\nuse \\Zumba\\Symbiosis\\Event\\Event;\r\n\r\n// Somewhere in your app, trigger plugins listening to event\r\n$event = new Event('sample.someevent', array('ping' => 'pong'));\r\n$event->trigger();\r\n```\r\n\r\n### Output\r\n\r\n```shell\r\nArray\r\n(\r\n    [ping] => pong\r\n)\r\n```\r\n\r\n## Individual Event Registries\r\n\r\nAs of `v1.2`, event registries have been added to allow for separation of events. This allows for \"namespacing\"\r\nyour event registries. The `EventManager` remains backwards compatible as now the EventManager creates a static instance\r\nof an `EventRegistry`. Since the event structure is loosly coupled in the Plugin architecture, this allows for namespacing\r\nyour event registries per plugin.\r\n\r\n### Example Event Registry namespacing\r\n\r\n```php\r\n<?php\r\n\r\n$registry1 = new \\Zumba\\Symbiosis\\Event\\EventRegistry();\r\n$registry2 = new \\Zumba\\Symbiosis\\Event\\EventRegistry();\r\n\r\n$registry1->register('sample.someevent', function ($event) {\r\n\tprint_r($event->data());\r\n});\r\n$registry2->register('sample.someevent', function ($event) {\r\n\techo \"Separate registry\\n\";\r\n\tprint_r($event->data());\r\n});\r\n\r\n$event = new \\Zumba\\Symbiosis\\Event\\Event('sample.someevent', array('ping' => 'pong'));\r\n$registry1->trigger($event);\r\n// Prints: \r\n// Array(\r\n//   [ping] => pong\r\n// )\r\n\r\n$registry2->trigger($event);\r\n// Prints:\r\n// Separate registry\r\n// Array(\r\n//   [ping] => pong\r\n// )\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}